import streamlit as st
import requests
import datetime
import json
from typing import Any, Dict

BASE_URL = "http://localhost:8000/api"  # Backend base URL (no trailing slash)

st.set_page_config(
    page_title="üåç Wanderly ‚Äî Agentic AI Trip Builder",
    page_icon="üåç",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.subheader("üåç Wanderly ‚Äî Agentic AI Trip Builder")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Helper functions for API calls
def api_get(path: str) -> Dict[str, Any]:
    url = f"{BASE_URL}{path}"
    try:
        resp = requests.get(url, timeout=10)
        return {"ok": resp.ok, "status_code": resp.status_code, "text": resp.text, "json": _safe_json(resp)}
    except requests.RequestException as e:
        return {"ok": False, "error": str(e)}


def api_post(path: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    url = f"{BASE_URL}{path}"
    try:
        resp = requests.post(url, json=payload, timeout=20)
        return {"ok": resp.ok, "status_code": resp.status_code, "text": resp.text, "json": _safe_json(resp)}
    except requests.RequestException as e:
        return {"ok": False, "error": str(e)}


def _safe_json(resp: requests.Response):
    try:
        return resp.json()
    except Exception:
        return None


def format_response(res: Dict[str, Any]) -> str:
    if not res.get("ok"):
        return f"Error: {res.get('error') or res.get('text') or 'Unknown error'}"
    body = res.get("json")
    if body is None:
        return f"Status: {res.get('status_code')}\n\n{res.get('text')}"
    return json.dumps(body, indent=2, ensure_ascii=False)


# Sidebar: API tester
st.sidebar.header("API validation") 
if st.sidebar.button("Check /health"):
    placeholder = st.sidebar.empty()
    with st.spinner("Calling /health..."):
        res = api_get("/health")
    placeholder.code(format_response(res))

if st.sidebar.button("Create /create_session"):
    placeholder = st.sidebar.empty()
    with st.spinner("Creating session..."):
        payload = {"session_name": "test-session"}
        res = api_post("/create_session", payload)
    placeholder.code(format_response(res))

if st.sidebar.button("List /models"):
    placeholder = st.sidebar.empty()
    with st.spinner("Calling /models..."):
        res = api_get("/models")
    placeholder.code(format_response(res))

st.sidebar.markdown("---")
chat_input = st.sidebar.text_area("User input", value="Hello, Plan a trip to New York, USA for 3 days")
if st.sidebar.button("Quick chat"):
    placeholder = st.sidebar.empty()
    with st.spinner("Calling /chat..."):
        payload = {"message": chat_input}
        res = api_post("/chat", payload)
    placeholder.code(format_response(res))

# Chat input box at bottom
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to New York, USA for 3 days")
    submit_button = st.form_submit_button("Send")

if submit_button and user_input.strip():
    try:
        # Show thinking spinner while backend processes
        with st.spinner("Bot is thinking..."):
            payload = {"message": user_input}
            response = requests.post(f"{BASE_URL}/chat", json=payload, timeout=60)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""# üåç Wanderly ‚Äî AI Trip Planner

            # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            # **Created by:** Wanderly ‚Äî Travel Agent

            ---

            {answer}

            ---
            
            *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements, before your trip.*
            """
            st.markdown(markdown_content)
        else:
            st.error(" Bot failed to respond: " + response.text)

    except Exception as e:
        st.error(f"The response failed due to {e}")